"""
Задание 1
Необходимо отсортировать первые две трети списка в порядке возрастания,
если среднее арифметическое всех элементов больше нуля; иначе—лишь первую треть.
Остальную часть списка не сортировать, а расположить в обратном порядке.
"""
print("заданный список: [10, 1, 2, 9, 4, 8, 7, 5, 6]")

alist = [10, 1, 2, 9, 4, 8, 7, 5, 6]              #заданный список среднее ариф > 0
# alist = [1, 2, -10, -9, -4, 8, -7, 5, 6]        #заданный список среднее ариф < 0

dve_treti = (len(alist) * 2) // 3               #длина две трети
srez_dve_treti = alist[-1:dve_treti-1:-1]       #срез от две трети в обратном порядке

odna_tret = (len(alist) * 1) // 3               #длина одной трети
srez_odna_tret = alist[-1:odna_tret-1:-1]       #срез от одной трети в обратном порядке

my_sum = 0                                      #сумма списка

for n in alist:                                 #цикл для нахождении суммы списка
    my_sum += n

sr_arif = my_sum / len(alist)                   #нахождение среднего арифметического

if sr_arif > 0:                                 #условие если среднее арифм. > 0
    for i in range(1, dve_treti):               #сортировка через алгоритм
        temp = alist[i]
        j = i - 1
        while j >= 0 and temp < alist[j]:
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp

    print("отсортированный", alist[:dve_treti] + srez_dve_treti)       #вывод списка

if sr_arif < 0:                                     #условие если среднее арифм. < 0
    for i in range(1, odna_tret):                   #сортировка через алгоритм
        temp = alist[i]
        j = i - 1
        while j >= 0 and temp < alist[j]:
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp

    print("отсортированный", alist[:odna_tret] + srez_odna_tret)     #вывод списка


"""
Задание 2
Написать программу «успеваемость». Пользователь вводит 10 оценок студента. Оценки от 1 до 12. Реализовать
меню для пользователя:
■ Вывод оценок (вывод содержимого списка);
■ Пересдача экзамена (пользователь вводит номер элемента списка и новую оценку);
■ Выходит ли стипендия (стипендия выходит, если средний бал не ниже 10.7);
■ Вывод отсортированного списка оценок: по возрастанию или убыванию.
10 5 9 10.8 12 11 10 8 10.7 10.8
"""

def shell(mark):                                    #сортировка по алгоритму шелла
    inc = len(mark)//2
    while inc:
        for i, el in enumerate(mark):
            while i >= inc and mark[i - inc] > el:
                mark[i] = mark[i - inc]
                i -= inc
            mark[i] = el
        inc = 1 if inc == 2 else int(inc * 5.0/11)
    return mark

mark = input("\nВведите 10 оценок от 1 до 12 через пробел: ").split()
mark = [float(x) for x in mark]
print(f"\nВывод оценок (вывод содержимого списка): {mark}")     #вывод содержимого списка

shell(mark)
print(f"\nВывод отсортированного списка оценок: {mark}\n")    #вывод отсортированного списка

for i in mark:                                                #назначение стипендии
    if i >= 10.7:
        print(f"{i} - назначена стипендия", end="; ")
    else:
        continue

print()                                                         #пересдача экзамена
print("\nпересдача экзамена выберите номер элемента и измените оценку")
for i, j in enumerate(mark):
    print(f"номер элемента - {i}: оценка - {j}")
x = int(input("введите номер элемента: "))
y = int(input("введите изменённую оценку: "))

for i, j in enumerate(mark):
    if i == x:
        j = y
    print(f"номер элемента - {i}: оценка - {float(j)}")

"""
Задание 3
Написать программу, реализующую сортировку списка методом усовершенствованной
сортировки пузырьковым методом. Усовершенствование состоит в том, чтобы анализировать
количество перестановок на каждом шагу, если это количество равно нулю,
то продолжать сортировку нет смысла — список отсортирован.
"""
def bublle_sort(arr):
    n = len(arr) # проходим по всем элементам
    count = 0
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                count += 1
                if count == 0:
                    break
    print(f"\nколичество перестановок - {count}")

# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
arr = [100, 2, 78, 3, 90, 5, 4, 55, 44, 7]
bublle_sort(arr)
print(arr)









