"""
----------------------------------------------------------------------------------------
функция заглушка
----------------------------------------------------------------------------------------
"""
# def my_func():
#     pass

"""
----------------------------------------------------------------------------------------
если в функцию поставить (*) надо прописывать аргумент
иначе будет подсвечивать ошибку, пример ниже и (-> str) ожидаемое
возвращение в return
----------------------------------------------------------------------------------------
"""
# def func_date(*, day: int, month: str) -> str:
#     return f"the date is {day} of {month}"
# print(func_date(day=15, month="october"))
#
# def custom_greeting(*, name: str, greeting: str = "hello") -> str:
#     return f"{greeting}, {name}"
# print(custom_greeting(name="john"))
# print(custom_greeting(name="john", greeting="good morning"))

"""
------------------------------------------------------------------------------------------
обычная функция
------------------------------------------------------------------------------------------
"""
# def my_func(x: int, y: int):
#     return x + y
#
# print(my_func(1, 2))

"""
-----------------------------------------------------------------------------------------
сложить все аргументы в кортеже
-----------------------------------------------------------------------------------------
"""
# def my_func(*args):
#     summary = 0
#     for num in args:
#         summary += num
#     return summary
#
# x = (1, 2, 3, 4, 5)
# y = (2, 5)
# print(my_func(*x, *y))

"""
-----------------------------------------------------------------------------------------
функция для словаря (dict)
-----------------------------------------------------------------------------------------
"""
# def my_func(**kwargs):
#     print(kwargs)
#     print(type(kwargs))
#
# my_func(name="evgen", age=46, city="tolliati")

"""
-------------------------------------------------------------------------------------------
функция для словаря, ключ, значение (dict)
-------------------------------------------------------------------------------------------
"""
# def my_func(**kwargs):
#     for key, value in kwargs.items():
#         print(key)
#         print(value)
#
# my_func(name="evgen", age=46, city="tolliati")

"""
--------------------------------------------------------------------------------------------
функция для словаря, ключ, значение + person (dict)
--------------------------------------------------------------------------------------------
"""
# def my_func(**kwargs):
#     for key, value in kwargs.items():
#         print(key)
#         print(value)
# person = {
#     "name": "John",
#     "age": 30,
#     "city": "New York"
# }
# my_func(**person)

"""
---------------------------------------------------------------------------------------------
функция которая принимает всевозможные варианты аргументов
---------------------------------------------------------------------------------------------
"""
# def my_func(x: int, y: int, *arg, value: int=6, **kwargs):
#     print(x, y)
#     print(arg)
#     print(value)
#     print(kwargs)
# person = {
#     "name": "John",
#     "age": 30,
#     "city": "New York"
# }
# my_func(1,2, 3, 4, 5, **person)

"""
------------------------------------------------------------------------------------------
функция которая возвращает несколько значений
------------------------------------------------------------------------------------------
"""
#
# def modify(old_dict: dict, **kwargs) -> tuple[dict, bool]:
#     is_modified = False
#
#     for key, value in kwargs.items():
#         if old_dict.get(key) != value: #есть ли значение с таким ключом в старом словаре
#             old_dict[key] = value
#             is_modified = True
#
#     return old_dict, is_modified
#
#
# product = {"id": 1, "name": "Laptop", "price": 999.99}
#
# # structure = modify(old_dict=product, in_stock=True) # добавили (in_stock) - участвует в распродаже
# # print(structure)
# # print(type(structure))
#
# product, was_modified = modify(old_dict=product, name="Laptop")
# print(product)
# print(was_modified)

"""
-------------------------------------------------------------------------------------------
функция отрабатывает там откуда запускается а не там где прописана
читается сверху вниз и надо учитывать области видимости внутри и глобальную
-------------------------------------------------------------------------------------------
"""
# def show():
#     z = 2
#     x = 1 + z
#     return x
#
# def show2():
#     z = 8
#     x = 7 + z
#     return x
#
# a = show()
# y = show2()
#
# print(a)
# print(y)

"""
--------------------------------------------------------------------------------------------------
сортировка по возрастанию
--------------------------------------------------------------------------------------------------
"""
# fruits = ["ban", "aplle", "cherry", "date"]
# num = [5, 4, 3, 2, 1]
# sort_fruits = sorted(fruits)
# sort_num = sorted(num)
# print(sort_fruits)
# print(type(sort_fruits))
# print(sort_num)
# print(type(sort_num))

"""
--------------------------------------------------------------------------------------------------
сортировка по убыванию
--------------------------------------------------------------------------------------------------
"""
# fruits = ["ban", "aplle", "cherry", "date"]
# num = [0, 1, 2, 3, 4, 5]
# sort_fruits = sorted(fruits, reverse=True)
# sort_num = sorted(num, reverse=True)
# print(sort_fruits)
# print(type(sort_fruits))
# print(sort_num)
# print(type(sort_num))

"""
--------------------------------------------------------------------------------------------------
сортировка по длине (длина имеется ввиду каждого элемента)
--------------------------------------------------------------------------------------------------
"""
#
# fruits = ["ban", "aplle", "cherry", "date"]
# def sort_len(element: str) -> int:
#     return len(element)
# sort_fruits = sorted(fruits, key=sort_len)
# print(sort_fruits)

"""
--------------------------------------------------------------------------------------------------
сортировка списка по возрасту
--------------------------------------------------------------------------------------------------
"""
# people = [
#     {"name": "Alice", "age": 40},
#     {"name": "Bob", "age": 20},
#     {"name": "Evgen", "age": 30},
#     {"name": "Ava", "age": 35},
# ]
#
# def sot_by_age(person: dict) -> int:
#     return person["age"]
#
# sort_people = sorted(people, key=sot_by_age)
#
# print(sort_people)

"""
--------------------------------------------------------------------------------------------------
сортировка списка по имени если возраст совпадает
--------------------------------------------------------------------------------------------------
"""
# people = [
#     {"name": "Alice", "age": 40},
#     {"name": "Bob", "age": 20},
#     {"name": "Evgen", "age": 30},
#     {"name": "Ava", "age": 30},
# ]
#
# def sot_by_age_name(element: dict) -> tuple[int, str]:
#     return element["age"], element["name"]
#
# sort_people = sorted(people, key=sot_by_age_name)
#
# print(sort_people)

"""
--------------------------------------------------------------------------------------------------
фильтрация возвращает тру или фолс
--------------------------------------------------------------------------------------------------
"""
#
# def is_even(n: int) -> bool:
#     return n % 2 == 0
#
# numbers = [5, 4, 3, 2, 1]
#
# filter_numbers = list(filter(is_even, numbers))
#
# print(type(filter_numbers))
# print(filter_numbers)

"""
--------------------------------------------------------------------------------------------------
сортировка людей которым больше 18
--------------------------------------------------------------------------------------------------
"""
# people = [
#     {"name": "Alice", "age": 17},
#     {"name": "Bob", "age": 20},
#     {"name": "Evgen", "age": 16},
#     {"name": "Ava", "age": 30},
# ]
#
# def is_adult(person: dict) -> bool:
#     return person["age"] >= 18
#
# filter_people = list(filter(is_adult, people))
# print(filter_people)
