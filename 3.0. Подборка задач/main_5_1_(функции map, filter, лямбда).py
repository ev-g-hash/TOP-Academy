"""
Задание 1: Фильтрация положительных чисел Напишите программу,
которая принимает список чисел и использует filter(),
чтобы вернуть новый список, содержащий только положительные числа.
"""
# numbers = [1, -1, 3, -2, 5, 6]
#
# my_numbers = filter(lambda num:num > 0, numbers)
#
# print(list(my_numbers),"\t - список положительных чисел;")

"""
-------------------------------------------------------------------------------------
Фильтрация строк по первой букве Создайте список строк и используйте filter(), 
чтобы получить все строки, которые начинаются с буквы "A".
-------------------------------------------------------------------------------------
"""
# sps = ["В конце А", "А в начале здесь есть", "В середине А тоже есть", "Тут нет большой а"]
#
# my_sps = filter(lambda my_str:my_str[0] == "А", sps)
#
# print(list(my_sps), "\t - строки которые начинаются с буквы А;")

"""
-------------------------------------------------------------------------------------
Фильтрация по длине слов Напишите функцию, которая принимает список слов 
и возвращает новый список, содержащий только слова длиной больше 3 символов.
-------------------------------------------------------------------------------------
"""
# sps = ["или", "возле", "куда", "зачем"]
#
# my_sps = filter(lambda i:len(i) > 3, sps)
#
# print(list(my_sps), "\t - список длина слов которых больше 3;")

"""
-------------------------------------------------------------------------------------
Фильтрация объектов по значению Предположим, у вас есть список словарей, 
представляющих студентов с их именами и оценками. Напишите программу, 
которая использует filter(), чтобы вернуть список студентов с оценками выше 75.
-------------------------------------------------------------------------------------
"""
# student = [
#     {"name":"Alice", "grade":77},
#     {"name":"Bob", "grade":55},
#     {"name":"Егор", "grade":100},
#     {"name":"Вася", "grade":68}
# ]
# my_student = filter(lambda person:person["grade"] > 75, student)
#
# print("\nсписок студентов с оценками выше 75:")
# print(list(my_student))

"""
-------------------------------------------------------------------------------------
Четные и нечетные числа. Создайте список чисел от 1 до 20. Используйте filter(), 
чтобы создать два списка: один для четных чисел, другой для нечетных.
-------------------------------------------------------------------------------------
"""
# sps_numbers = list(range(21))
#
# my_even = list(filter(lambda x:x % 2 == 0, sps_numbers))
# my_odd = list(filter(lambda x:x % 2, sps_numbers))
#
# print("\nсписок четных чисел:")
# print(my_even)
# print("\nсписок нечетных чисел:")
# print(my_odd)

"""
------------------------------------------------------------------------------------
сложение словаря
------------------------------------------------------------------------------------
"""
#----------------------------------------------------------------------задачки
# names = ["егор", "артём", "николай"]
# ages = [30,25,35]
# people_dict = dict(map(lambda name_age:(name_age[0], name_age[1]), zip(names, ages)))
# print(people_dict)

"""
------------------------------------------------------------------------------------
возведение в квадрат
------------------------------------------------------------------------------------
"""
# numbers = [1,2,3,4,5,6]
# result = map(lambda x:x ** 2, map(lambda x:x * 2, numbers))
# print(list(result))

"""
------------------------------------------------------------------------------------
определение чётности
------------------------------------------------------------------------------------
"""
# numbers = [1, 2, 3, 4, 5, 6]
# def even(n):
#     return n % 2 == 0
# even_numbers = filter(even, numbers)
# print(list(even_numbers))

"""
------------------------------------------------------------------------------------
возведение в куб
------------------------------------------------------------------------------------
"""
# #-----------------------------------------------------------map lambda (map действие)
# numbers_1_1 = [1,2,3,4,5,6]
# result_1_1 = map(lambda x:x ** 3, numbers_1_1)
# print(list(result_1_1))
# #-----------------------------------------------------------map func (вычисление)
# numbers_1_2 = [1,2,3,4,5,6]
# def cube(n):
#     return n ** 3
#
# cube_numbers_1_2 = map(cube, numbers_1_2)
# print(list(cube_numbers_1_2))

"""
------------------------------------------------------------------------------------
строка убрать пробелы
------------------------------------------------------------------------------------ 
"""
# #-------------------------------------------------------map lambda (map действие)
# word_1_1 = ["hello world python", "hello world python"]
# rep_words_1_1 = map(lambda i:i.replace(" ", ""), word_1_1)
# print(list(rep_words_1_1))
# #-----------------------------------------------------------map func (map действие)
# word_1_2 = ["hello world python", "hello world python"]
# def my_words(n):
#     return n.replace(" ", "")
#
# rep_words_1_2 = map(my_words, word_1_2)
# print(list(rep_words_1_2))

"""
------------------------------------------------------------------------------------
умножение 4 списков
------------------------------------------------------------------------------------
"""
# def func(a,b,c,d):
#     return a * b * c * d
# list_1 = [1, 2, 3]
# list_2 = [1, 2, 3]
# list_3 = [1, 2, 3]
# list_4 = [1, 2, 3]
#
# result = map(func, list_1, list_2, list_3, list_4)
# print(list(result))

"""
------------------------------------------------------------------------------------
цельсий в фаренгейт
------------------------------------------------------------------------------------
"""
# celsius = [10, 20, 30]
# result = map(lambda x:x * 2 + 30, celsius)
# print(list(result))
#
# celsius_1 = [10, 20, 30]
# def cel(n):
#     return n * 2 + 30
# result_1 = map(cel, celsius_1)
# print(list(result_1))

"""
------------------------------------------------------------------------------------
Первая буква в предложении заглавная
------------------------------------------------------------------------------------
"""
# world_1_1 = ["hello world python"]
# cap_world_1_1 = map(lambda i:i.capitalize(), world_1_1)
# print(list(cap_world_1_1))
#
# world_1_2 = ["hello world python"]
# def capitalize(n):
#     return n.capitalize()
#
# cap_world_1_2 = map(capitalize, world_1_2)
# print(list(cap_world_1_2))

"""
------------------------------------------------------------------------------------
извлечение по ключу из словаря
------------------------------------------------------------------------------------
"""
# people = [{"name":"Alice"},{"name":"Bob"}]
# names = map(lambda person:person["name"], people)
# print(list(names))
#
# people_1 = [{"name":"Alice"},{"name":"Bob"}]
# def peo(n):
#     return n["name"]
# names_1 = map(peo, people_1)
# print(list(names_1))