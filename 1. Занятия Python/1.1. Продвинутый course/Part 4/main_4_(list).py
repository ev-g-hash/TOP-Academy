"""
Тимур создал список задач для своего лучшего урока математики.
В этот список входят: планиметрия, стереометрия, задача с параметром,
экономическая задача и задача на теорию чисел. Далее он проделал со списком
несколько действий:

Добавил в конец списка новую тему – уравнение;
Удалил из списка третью тему;
Добавил в конец списка новую тему – неравенство;
Удалил из списка первую тему.
Определите, какой элемент стоит на втором по порядку месте в получившемся списке.
"""

# my_list = [
#     # "планиметрия",
#     "стереометрия",
#     # "задача с параметром",
#     "экономическа задача",
#     "задача на теорию чисел"
#     "уравнение",
#     "неравенство"
# ]

"""
Выберите правильный способ соединения (конкатенации) двух списков list1 и list2: 

list1 = ['a', 'b', 'c', 'd']
list2 = ['e', 'f', 'g']

list3 = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
"""
# list1 = ['a', 'b', 'c', 'd']
# list2 = ['e', 'f', 'g']
#
# list3 = list1 + list2
#
# print(list3)

#--------------------------------------------------------------------------
# zeros = [0] * 10
# print(len(zeros))

# numbers = [10, 20, 30, 40, 50]
# print(numbers[-2])
# print(numbers[-4:-1])

# numbers = [10, 20, 30, 40, 50, 60, 70, 80]
# print(numbers[2:5])
# print(numbers[:4])
# print(numbers[3:])

# numbers = [4, 8, 12, 16, 34, 56, 100]
# numbers[1:4] = [20, 24, 28]
# print(numbers)

# numbers = [5, 10, 15, 25]
# print(numbers[::-2])

# numbers = [10, 20, 30, 40, 50]
# numbers.append(60)
# print(numbers)
#
# numbers.append(60)
# print(numbers)

# numbers = [10, 20, 30, 40, 50]
# numbers.pop()
# print(numbers)
#
# numbers.pop(2)
# print(numbers)


# letters = ['a', 'b', 'c', 'd']

# new_letters = letters.copy()
# new_letters = letters[:]
# new_letters = list(letters)
# print(new_letters)

# new_letters = new_letters.copy(letters)--------------------
# new_letters = copy(letters)--------------------------

# words = ['Hello', 'Python']
# print('-'.join(words))

# numbers = [10, 20, 30, 40]
# del numbers[0:6]
# print(numbers)

# words = ['xyz', 'zara', 'beegeek']
# print(max(words))

# numbers = [1, 2, 3, 4, 5, 6, 7]
# new_numbers = [2 * x for x in numbers]
# print(new_numbers)


"""
Тема урока: вложенные списки

Вложенные списки
Объявление и индексация
Функции len(), max(), min()
Списочные методы

Аннотация. Урок посвящен вложенным спискам, то есть спискам, входящим в качестве элементов 
в другие списки.
"""

"""
Создание вложенного списка
Работа с вложенными списками принципиально ничем не отличается от работы со списками, 
например, чисел или строк. Чтобы создать вложенный список, мы также перечисляем элементы 
через запятую в квадратных скобках:

my_list = [[0], [1, 2], [3, 4, 5]]
                  
Переменная my_list ссылается на список, состоящий из других списков 
(с вложенными списками).

Поскольку глубина вложенности списка my_list равна двум, то такой список обычно 
называют двумерным списком. На практике, как правило, мы работаем с двумерными списками, 
реже – с трехмерными.
"""
# my_list = [[0], [1, 2], [3, 4, 5]]
#
# print(my_list)
# print(my_list[0])
# print(my_list[1])
# print(my_list[2])
# print(len(my_list))

#Рассмотрим программный код:

# my_list = ['Python', [10, 20, 30], ['Beegeek', 'Stepik!']]
#
# print(my_list[0][2])       # индексирование строки 'Python'
# print(my_list[1][1])       # индексирование списка [10, 20, 30]
# print(my_list[2][-1])      # индексирование списка ['Beegeek', 'Stepik!']
# print(my_list[2][-1][-1])  # индексирование строки 'Stepik!'

# total = 0
# my_list = [[0], [1, 2], [3, 4, 5], [], [10, 20, 30]]
#
# for li in my_list:
#     total += len(li)
#
# print(total)


"""
Функции min() и max()
Функции min() и max() могут работать и со списками. Если этим функциям передается 
несколько списков, то целиком возвращается один из переданных списков. 
При этом сравнение происходит поэлементно: сначала сравниваются первые элементы списков. 
Если они не равны, то функция min() вернет тот список, первый элемент которого меньше, 
max() – наоборот. Если первые элементы равны, то будут сравниваться вторые и т. д.
"""
# list1 = [1, 7, 12, 0, 9, 100]
# list2 = [1, 7, 90]
# list3 = [1, 10]
#
# print(min(list1, list2, list3))
# print(max(list1, list2, list3))

# Функции min() и max() также можно использовать при работе с вложенными списками.
# Рассмотрим программный код:

# list1 = [[1, 7, 12, 0, 9, 100], [1, 7, 90], [1, 10]]
# list2 = [['a', 'b'], ['a'], ['d', 'p', 'q']]
#
# print(min(list1))
# print(max(list1))
# print(min(list2))
# print(max(list2))

"""
Примечания
Примечание 1. Независимо от вложенности списков, нам нужно помнить по возможности 
все списочные методы:

метод append() добавляет новый элемент в конец списка;

метод extend() расширяет один список другим списком;

метод insert() вставляет значение в список в заданной позиции;

метод index() возвращает индекс первого элемента, значение которого равняется переданному 
в метод значению;

метод remove() удаляет первый элемент, значение которого равняется переданному 
в метод значению;

метод pop() удаляет элемент по указанному индексу и возвращает его;

метод count() возвращает количество элементов в списке, значения которых равны 
переданному в метод значению;

метод reverse() инвертирует порядок следования значений в списке, 
то есть меняет его на противоположный;

метод copy() создает поверхностную копию списка.;

метод clear() удаляет все элементы из списка;

оператор del позволяет удалять элементы списка по определенному индексу.

Примечание 2. Методы строк, работающие со списками:

метод split() разбивает строку на слова, используя в качестве разделителя 
последовательность пробельных символов, символ табуляции (\\t) или символ новой строки (\\n).

метод join() собирает строку из элементов списка, используя в качестве разделителя 
строку, к которой применяется метод.

Примечание 3. Язык Python не ограничивает нас в уровнях вложенности: 
элементами списка могут быть списки, их элементами могут быть другие списки, 
элементами которых в свою очередь могут быть другие списки...
"""
# list1 = [[1, 8, 9], [4, 8, 12, 16], [0, 2, 7]]
# print(list1[0][1] + list1[3][2] + list1[2][2])


# list1 = [10, 20, [300, 400, [5000, 6000], 500], 30, 40]
#
# list1[2][2].append(7000)
#
# print(list1)


"""
Используя списочный метод extend(), дополните приведенный ниже код так, 
чтобы список list1 имел вид:

list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g', 'h', 'i', 'j'], 'k'], 'l'], 'm', 'n']
    
Подсписок для расширения  sub_list = ['h', 'i', 'j'].
"""

# list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g'], 'k'], 'l'], 'm', 'n']
# sub_list = ['h', 'i', 'j']
#
# list1[2][1][2].extend(sub_list)
#
#
# print(list1)

"""
Используя цикл for и встроенную функцию max(), дополните приведенный ниже код так, 
чтобы он выводил максимальный элемент среди всех элементов вложенных списков списка list1.
"""
# list1 = [[1, 7, 8], [9, 7, 102], [6, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# maximum = max([max(i) for i in list1])
#
# print(maximum)

"""
Дополните приведенный ниже код так, чтобы список list1 имел вид:

list1 = [[8, 7, 1], [102, 7, 9], [105, 106, 102], [103, 98, 99, 100], [3, 2, 1]]
"""

# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
#
# list2 = list1.copy()
# list1.clear()
#
# for i in list2:
#     i.reverse()
#     list1.append(i)
#
# print(list1)

#------------------------------------------------------------
# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
#
# for elem in list1:
#     elem.reverse()
#
# print(list1)
#-----------------------------------------------------------
# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# [x.reverse() for x in list1]
# print(list1)

"""
Дополните приведенный ниже код так, чтобы он выводил единственное число – 
сумму всех чисел списка list1, разделенную на общее количество всех чисел.

Подсказка
Используйте встроенные функции sum() и len() для нахождения суммы всех элементов 
и их количества. 
"""

# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# total = 0
# counter = 0
#
# for i in list1:
#     total += sum(i)
#     counter += len(i)
#
# print(total/counter)


"""
Список по образцу 1
На вход программе подается число n. 
Напишите программу, которая создает и выводит построчно список, состоящий из 
n списков [[1, 2, ..., n], [1, 2, ..., n], ..., [1, 2, ..., n]].

Формат входных данных
На вход программе подается натуральное число n.

Формат выходных данных
Программа должна вывести построчно указанный список.

Sample Input 1:
3
Sample Output 1:
[1, 2, 3]
[1, 2, 3]
[1, 2, 3]
"""

# n = int(input())
# x = [i for i in range(1, n + 1)]
#
# for _ in range(n):
#     print(x)

"""
Список по образцу 2
На вход программе подается число n. 
Напишите программу, которая создает и выводит построчно вложенный список, состоящий из 
n списков [[1], [1, 2], [1, 2, 3], ..., [1, 2, ..., n]].

Формат входных данных
На вход программе подается натуральное число n.

Формат выходных данных
Программа должна вывести построчно указанный вложенный список.

Sample Input 1:
4

Sample Output 1:
[1]
[1, 2]
[1, 2, 3]
[1, 2, 3, 4]
"""

# n = int(input())
#
# x = 0
# while x < n:
#     x += 1
#     my_list = list(range(1, x + 1))
#     print(my_list)

#---------------------------------------------------------------
# n = int(input())
# for i in range(1, n + 1):
#     print(list(range(1, i + 1)))


"""
треугольник паскаля
"""

# n = int(input())
# lst = [[1]]
#
# for i in range(1, n + 1):
#     row = [1] * (i + 1)
#     for j in range(i + 1):
#         if j != 0 and j != i:
#             row[j] = lst[i - 1][j - 1] + lst[i - 1][j]
#
#     lst.append(row)
#
# print(lst[-1])

#--------------------------с пояснением
# def pascal(n):
#     # начальная строка
#     cur_seq = [1]
#
#     for _ in range(n):
#         # добавляем нули по бокам к текущей строке строке
#         cur_seq = [0] + cur_seq + [0]
#         # тут будет храниться новая строка
#         new_seq = []
#
#         for i in range(len(cur_seq) - 1):
#             # добавляем в новую строку сумму соседних элементов текущей строки
#             new_seq.append(cur_seq[i] + cur_seq[i + 1])
#
#         # теперь новая строка становится нашей текущей строкой
#         cur_seq = new_seq
#
#     return cur_seq
#
#
# n = int(input())
# print(pascal(n))

"""
Треугольник Паскаля 2
На вход программе подается натуральное число n. 
Напишите программу, которая выводит первые n строк треугольника Паскаля.

Формат входных данных
На вход программе подается число n(n≥1).

Формат выходных данных
Программа должна вывести первые n строк треугольника Паскаля,
 каждую на отдельной строке, в соответствии с образцом.
 
Sample Input 1:
4
Sample Output 1:
1
1 1
1 2 1
1 3 3 1
"""
















