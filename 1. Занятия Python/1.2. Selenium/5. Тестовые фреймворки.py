"""
Проверка ожидаемого результата
"""

"""
Как можно проверить ожидаемый результат? 
Для этого используется встроенная в Python инструкция assert, 
которая проверяет истинность утверждений. assert True не приводит к выводу 
дополнительных сообщений, а вот assert False вызовет исключение AssertionError.
"""
#Если значение выражения истинно, то в консоли не должно появиться дополнительных сообщений.
# Выполним:

# assert abs(-42) == 42

#---------------------------------------------------------------------------------
#Если условие не выполнено, то в консоли выводится лог ошибки с названием файла и
# номером строчки, в которой произошла ошибка, а также тип ошибки AssertionError:

# assert abs(-42) == -42

#--------------------------------------------------------------------------------
#Простое сообщение AssertionError не очень информативно. Когда тестов становится много,
# бывает сложно вспомнить, что именно мы проверяем в данном тесте.
# Для добавления дополнительного сообщения можно при вызове assert через
# запятую написать нужное сообщение, которое будет выведено в случае ошибки проверки результата

# assert abs(-42) == -42, "Should be absolute value of a number"

"""
Составные сообщения об ошибках 
Отдельно хочется поговорить про качество сообщений об ошибках, 
которые показываются при падении теста. Почему это важно? 
Хорошо написанный текст помогает быстро локализовать найденный баг и 
разобраться в том, что произошло и из-за чего тест упал. Хороший assert 
сэкономит вам часы вашей работы, особенно когда количество тестов переходит за сотню.

В целом, тут как с любым фидбеком: важно давать его точно и актуально. 
Если вы проверяете наличие элемента, то обязательно пишите, что это за элемент 
по смыслу на странице: 
"""

#assert self.is_element_present('create_class_button', timeout=30), "No create class button"

#--Если элемент встречается на нескольких страницах приложения, не лишним будет указать,
#--где именно произошла ошибка:

#assert self.is_element_present('new_announcement_button', timeout=30), "No new announcement button on profile page"

"""
Форматирование строк с помощью конкатенации
В питоне такое можно провернуть с помощью конкатенации строк, например:
"""
# actual_result = "abrakadabra"
# print("Wrong text, got " + actual_result + ", something wrong")

"""
Форматирование строк с помощью str.format
"""

#print("Let's count together: {}, then goes {}, and then {}".format("one", "two", "three"))


"""
Форматирование строк с помощью f-strings
И наконец наиболее современный способ форматирования строк, 
который появился в Python3.6, носит название f-strings. Он позволяет 
исполнять выражения на Python прямо внутри строк, обладает еще большей 
лаконичностью и удобством использования. Для использования возможностей 
f-strings нужно указывать символ f перед строкой в таком формате: 
f"ваша строка {my_var}". В фигурных скобках указывается имя переменной, 
значение которой надо подставить в строку, или выражение, результат исполнения 
которого также требуется подставить в вашу строку.
"""

# str1 = "one"
# str2 = "two"
# str3 = "three"
# print(f"Let's count together: {str1}, then goes {str2}, and then {str3}")

#--------------------правильный текст
# catalog_text = self.catalog_link.text # считываем текст и записываем его в переменную
# assert catalog_text == "Каталог", \
#     f"Wrong language, got {catalog_text} instead of 'Каталог'"

"""
Задание: составные сообщения об ошибках
Для закрепления материала реализуйте проверку самостоятельно. 

Вам дана функция test_input_text,  которая принимает два значения: 
expected_result — ожидаемый результат, и actual_result — фактический результат. 
Обратите внимание, input использовать не нужно!

Функция должна проверить совпадение значений с помощью оператора assert и, 
в случае несовпадения, предоставить исчерпывающее сообщение об ошибке. 

Важно! Формат ошибки должен точно совпадать с приведенным в примере, 
чтобы его засчитала проверяющая система! 

Маленький совет: попробуйте воспользоваться кнопкой "Запустить код" 
и протестируйте ваш код на разных введенных значениях, проверьте вывод вашей 
функции на разных парах. Обрабатывать ситуацию с пустым или невалидным вводом не нужно. 

Sample Input 1:
8 11

Sample Output 1:
expected 8, got 11
"""

# def test_input_text(expected_result, actual_result):
#     assert abs(expected_result) == abs(actual_result), f"expected {expected_result}, got {actual_result}"
#
#
# test_input_text(11,11)


"""
Задание: составные сообщения об ошибках и поиск подстроки
Иногда при работе с текстами не нужны жёсткие проверки на полное совпадение, 
и требуется проверить, что некий текст является подстрокой другого текста. 
Это можно сделать либо с помощью ключевого слова in, либо с помощью функции find:
"""
# s = 'My Name is Julia'
#
# if 'Name' in s:
#     print('Substring found')
#
# index = s.find('Name')
# if index != -1:
#     print(f'Substring found at index {index}')


"""
Вам дан шаблон для функции test_substring, 
которая принимает два значения: full_string и substring. 

Функция должна проверить вхождение строки substring в строку full_string 
с помощью оператора assert и, в случае несовпадения, предоставить исчерпывающее 
сообщение об ошибке. 

Важно! Формат ошибки должен точно совпадать с приведенным в примере, 
чтобы его засчитала проверяющая система! 

Маленький совет: попробуйте воспользоваться кнопкой "Запустить код" и протестируйте 
ваш код на разных введенных значениях, проверьте вывод вашей функции на разных парах. 
Обрабатывать ситуацию с пустым или невалидным вводом не нужно. 

Sample Input 1:
fulltext some_value

Sample Output 1:
expected 'some_value' to be substring of 'fulltext'
"""

# def test_substring(full_string, substring):
#
#     assert substring in full_string, f"expected '{substring}' to be substring of '{full_string}'"
#
#
# test_substring("fulltext", "some_value")





















