"""
Функция randint()

Функция randint() принимает два обязательных аргумента a и b и
возвращает случайное целое число из отрезка
[a;b].
Следующий код выводит два случайных целых числа: num1 из отрезка
[0; 17] и num2 из отрезка [-5; 5]
"""
# import random
#
# num1 = random.randint(0, 17)
# num2 = random.randint(-5, 5)
#
# print(num1)
# print(num2)

"""
Функция randrange()
Если вы помните, как применять функцию range(), 
то почувствуете себя непринужденно с функцией randrange(). 
Функция randrange() принимает такие же аргументы, что и функция range(). 
Различие состоит в том, что функция randrange()
не возвращает саму последовательность чисел. Вместо этого она возвращает 
случайно выбранное число из последовательности чисел.

Следующий код присваивает переменной num случайное число в диапазоне от 
0 до 9:
"""
# import random
#
# num = random.randrange(10)
# print(num)

"""
Функция random()
Функции randint() и randrange() возвращают случайное целое число. 
А вот функция random() возвращает случайное число с плавающей 
точкой (вещественное число). В функцию random() никаких аргументов не передается. 
Функция random() возвращает случайное число с плавающей точкой в диапазоне от 
0.0 до 1.0 (исключая 1.0).

Следующий код выводит случайное число с плавающей точкой из диапазона 

[0.0;1.0):

"""
# import random
#
# num = random.random()
# print(num)

"""
Функция uniform()
Функция uniform() тоже возвращает случайное число с плавающей точкой, 
но при этом она позволяет задавать диапазон для отбора значений.

Следующий код выводит случайное число с плавающей точкой из диапазона 

[1.5;17.3]:

"""
# import random
#
# num = random.uniform(1.5, 17.3)
# print(num)

"""
Примечания
Примечание 1. Подключение модуля следующим образом:

from random import *

позволяет в дальнейшем не писать название модуля и символ точки при вызове функций модуля.

Примечание 2. Функции модуля random на самом деле являются методами 
одноименного класса random.

Примечание 3. Функция randint() реализована на основе функции 
randrange() следующим образом:

"""
# # Return random integer in range [a, b], including both end points.
# def randint(self, a, b):
#     return self.randrange(a, b + 1)

"""
Решение задач
Задача 1. Профессор Тимур преподает вводный курс статистики и попросил вас написать программу, которую он мог бы использовать на занятиях для имитации бросания игральных кубиков. Программа должна случайным образом генерировать два числа в диапазоне от
1
1 до
6
6 и показывать их.

Решение. Для генерации целых чисел мы будем использовать функцию randint():

"""
# import random
#
# print('Бросаем кубики... ')
# print('Значения граней:')
# print(random.randint(1, 6))
# print(random.randint(1, 6))

"""
Задача 2. В интервью с профессором Тимуром вы выясняете, 
что он хотел бы использовать программу для имитации нескольких поочередных бросаний кубика.

Решение. Будем использовать цикл while, который имитирует один бросок 
кубиков и затем спрашивает пользователя,
следует ли сделать еще один бросок. Цикл будет повторяться до тех пор, 
пока пользователь отвечает "да", набирая букву "д":

"""
# import random
#
# again = 'д'
# while again.lower() == 'д':
#     print('Бросаем кубики... ')
#     print('Значения граней:')
#     print(random.randint(1, 6))
#     print(random.randint(1, 6))
#     again = input('Бросить кубики еще раз? (д = да, н = нет): ')

"""
Задача 3. Профессор Тимур был так доволен написанным вами симулятором бросания кубиков, 
что попросил вас разработать еще одну программу. Он хотел бы иметь симулятор 
десятикратного поочередного подбрасывания монеты. Всякий раз, 
когда программа имитирует подбрасывание монеты, она должна случайным образом 
показывать "орла" или "решку".

Решение. Мы можем сымитировать бросание монеты путем генерации случайного 
числа в диапазоне от 0 до 1. Для генерации целых чисел мы будем использовать 
функцию randint():

"""
# import random
#
# for _ in range(10):
#     num = random.randint(0, 1)
#     if num == 0:
#         print('Орел')
#     else:
#         print('Решка')


"""
Функция shuffle()
Функция shuffle() принимает список в качестве обязательного аргумента 
и перемешивает его случайным образом.

Следующий код перемешивает список numbers случайным образом, 
а затем выводит его содержимое:

"""

# import random
#
# numbers = [1, 2, 3, 4, 5, 6, 7, 8]
# random.shuffle(numbers)
# print(numbers)

"""
Функция choice()
Функция choice() принимает список (строку) в качестве обязательного аргумента 
и возвращает один случайный элемент из переданного списка (строки).

Следующий код выводит по одному случайному элементу из строки 'BEEGEEK' 
и списков [1, 2, 3, 4], ['a', 'b', 'c', 'd']:

"""
# import random
#
# print(random.choice('BEEGEEK'))
# print(random.choice([1, 2, 3, 4]))
# print(random.choice(['a', 'b', 'c', 'd']))

"""
Функция sample()
Функция sample() принимает два обязательных аргумента: 
список (строку) и количество случайных элементов, 
а возвращает список случайных элементов в указанном количестве.

Результатом работы кода:

"""
# import random
#
# numbers = [2, 5, 8, 9, 12]
#
# print(random.sample(numbers, 1))
# print(random.sample(numbers, 2))
# print(random.sample(numbers, 3))
# print(random.sample(numbers, 5))


# import random
#
# numbers = [1, 2, 3, 5, 7]
#
# num = random.choice(numbers)
#
# print(num)


# import random
#
# numbers = list(range(2, 10, 2)) + [3]
# print(numbers)
# num = random.choice(numbers)
# print(num)






























