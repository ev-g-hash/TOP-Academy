
# def print_paris():
#     print(s)
#     s = 'I love Paris'
#
# print_paris()

#----------------------------------------------------------
# def print_paris():
#     s = 'I love Paris'
#     print(s)
#
# def print_london():
#     s = 'I love London'
#     print(s)
#
# s = 'I love Moscow'
# print_paris()
# print_london()
# print(s)
#------------------------------------------------------------
# def swap(a, b):
#     a, b = b, a
#
# a = 4
# b = 3
# swap(a, b)
# print(a - b)

#-------------------------------------------------------------
# number = 101
#
# def is_prime(num):
#     flag = True
#     for i in range(2, num):
#         if num % i == 0:
#             flag = False
#             break
#     if num != 1 and flag == True:
#         print('–ß–∏—Å–ª–æ', num, '–ø—Ä–æ—Å—Ç–æ–µ.')
#     else:
#         print('–ß–∏—Å–ª–æ', num, '—Å–æ—Å—Ç–∞–≤–Ω–æ–µ.')
#
#
# x = 17
# y = int(input())
# is_prime(x)
# is_prime(y)
# is_prime(number)
#---------------------------------------------------------------------------
# birds = 1000
#
# def print_texas():
#     global birds
#     birds = 5000
#     print('–í –¢–µ—Ö–∞—Å–µ –æ–±–∏—Ç–∞–µ—Ç', birds, '–ø—Ç–∏—Ü.')
#
# def print_california():
#     print('–í –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ –æ–±–∏—Ç–∞–µ—Ç', birds, '–ø—Ç–∏—Ü.')
#
# print_texas()
# print_california()

#--------------------------------------------------------------------------
# x = 5
#
# def add():
#     x = 3
#     x = x + 5
#     print(x)
#
# add()
# print(x)

#---------------------------------------------------------------------------
# x = 5   #–ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ö –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
#
# def add():
#     global x
#     x = 3
#     x = x + 5
#     print(x)
#
# add()
# print(x)
#---------------------------------------------------------------------------
# def double(num):
#     return num * 2
#
# print(double(10))

# def triple(num):
#     num = num * 3
#
# print(triple(4))

# def double(num):
#     print(num * 2)
#
# print(double(7))

# def triple(num):              ##—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—Ç—É–µ—Ç —Ç–æ —á—Ç–æ –µ—Å—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–∏–Ω—Ç –ø—Ä–∏–Ω—Ç—É–µ—Ç —Ç–æ —á—Ç–æ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Ñ—É–Ω–∫—Ü–∏—è
#     print(num * 3)
#     return num * 3
#
# print(triple(4))

# def get_sum(x, y, z):               # —Ç–∞–∫ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –ø—Ä–∏–Ω—Ç —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—Ç –ø–æ—Ç–æ–º —Ä–µ—Ç—é—Ä–Ω —Ç–æ–≥–¥–∞ –≤—ã–≤–µ–¥–µ—Ç —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞ 6 –∏ 6
#     return x + y + z
#     print('–°—É–º–º–∞ —Ä–∞–≤–Ω–∞', x + y + z)
#
# print(get_sum(1, 2, 3))

# def do_something(numbers):
#     result = 1
#     for i in numbers:
#         result *= i
#
#     return result
#
# print(do_something([2, 2, 2, 2]))

#-----------------------------------------------------------------------
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def convert_to_miles(km):
#     m = km * 0.6214
#     return round(m, 4)
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(convert_to_miles(num))

#----------------------------------------------------------------
"""
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_days(month), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
–Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
–æ—Ç 1 –¥–æ 12 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –≥–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–∏—Å–æ–∫–æ—Å–Ω—ã–º.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

"""
from itertools import count

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_days(month):
#     if month == 2:
#         return 28
#     elif month in [1, 3, 5, 7, 8, 10, 12]:
#         return 31
#     else:
#         return 30
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_days(num))

"""
–î–µ–ª–∏—Ç–µ–ª–∏ 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 
–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
print(get_factors(1))
print(get_factors(5))
print(get_factors(10))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
[1]
[1, 5]
[1, 2, 5, 10]
"""

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_factors(num):
#     my_list = [i for i in range(1, num + 1) if n % i == 0]
#     return my_list
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_factors(n))

"""
–î–µ–ª–∏—Ç–µ–ª–∏ 2
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_of_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 
—á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é get_factors(num) –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(number_of_factors(1))
print(number_of_factors(5))
print(number_of_factors(10))
"""

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def number_of_factors(num):
#     return len([i for i in range(1, num + 1) if n % i == 0])
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(number_of_factors(n))

"""
–ù–∞–π—Ç–∏ –≤—Å–µ—Ö
–ù–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ find('a') –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ 
–≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ a –≤ —Å—Ç—Ä–æ–∫–µ. –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ 
–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∞.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º find_all(target, symbol), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 
–¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å—Ç—Ä–æ–∫—É target –∏ —Å–∏–º–≤–æ–ª symbol –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, 
—Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ, —Ç–æ —Å–ª–µ–¥—É–µ—Ç 
–≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(find_all('abcdabcaaa', 'a'))
print(find_all('abcadbcaaa', 'e'))
print(find_all('abcadbcaaa', 'd'))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
[0, 4, 7, 8, 9]
[]
[4]
"""

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def find_all(target, symbol):
#     return [i for i, j in enumerate(target) if j == symbol]
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# s = input()
# char = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(find_all(s, char))

#----------------------------------------------------------- —á–µ—Ä–µ–∑ —Å—á—ë—Ç—á–∏–∫

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def find_all(target, symbol):
#     cur = 0
#     res = []
#
#     for i in target:
#         if i == symbol:
#             res.append(cur)
#         cur += 1
#     return res
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# s = input()
# char = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(find_all(s, char))

#--------------------------------------------------------------—á–µ—Ä–µ–∑ –¥–ª–∏–Ω—É
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def find_all(target, symbol):
#     li = []
#     for i in range(len(target)):
#         if target[i] == symbol:
#             li.append(i)
#     return li
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# s = input()
# char = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(find_all(s, char))

"""
Merge lists 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge(list1, list2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ 
–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞, 
—Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ sort(), 
–∞ –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –∏ –±–µ–∑ –Ω–µ–≥–æ. üòé

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(merge([1, 2, 3], [5, 6, 7, 8]))
print(merge([1, 7, 10, 16], [5, 6, 13, 20]))

[1, 2, 3, 5, 6, 7, 8]
[1, 5, 6, 7, 10, 13, 16, 20]
"""

# def merge(list1, list2):
#     result = list1 + list2   # —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
#     result.sort()            # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º sort()
#     return result            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
#
# list1 = [3, 10, 11, 12, 47, 57, 58, 63, 77, 79, 80, 95]
# list2 = [0, 11, 12, 20, 24, 26, 47, 48, 53, 65, 70, 81, 84, 84, 90]
# list3 = merge(list1, list2)  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–∏—è–Ω–∏—è –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
#
# print(list3)

"""
–ë—ã—Å—Ç—Ä–æ–µ —Å–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–∏–Ω
–ü—É—Å—Ç—å –º—ã –∏–º–µ–µ–º –¥–≤–∞ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞ list1 –∏ list2.

–ê–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–≥–æ —Å–ª–∏—è–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏–π:

–°–æ–∑–¥–∞–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ p1 = 0 –∏ p2 = 0 –Ω–∞ –Ω–∞—á–∞–ª–∞ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤ 
list1 –∏ list2 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ;
–ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –±–µ—Ä–µ–º –º–µ–Ω—å—à–∏–π –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ list1[p1] –∏ list2[p2];
–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫; 
–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 
1 —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ (p1 –∏–ª–∏ p2), –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª –≤–∑—è—Ç —ç–ª–µ–º–µ–Ω—Ç;
–ö–æ–≥–¥–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã 
–≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫.
"""

# def quick_merge(list1, list2):
#     result = []
#
#     p1 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list1
#     p2 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list2
#
#     while p1 < len(list1) and p2 < len(list2):  # –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∏–∑ —Å–ø–∏—Å–∫–æ–≤
#         if list1[p1] <= list2[p2]:
#             result.append(list1[p1])
#             p1 += 1
#         else:
#             result.append(list2[p2])
#             p2 += 1
#
#     if p1 < len(list1):  # –ø—Ä–∏—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
#         result += list1[p1:]
#     else:  # –∏–Ω–∞—á–µ –ø—Ä–∏—Ü–µ–ø–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥—Ä—É–≥–æ–≥–æ —Å–ø–∏—Å–∫–∞
#         result += list2[p2:]
#
#     return result

"""
Merge lists 2
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫, 
—Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è. 
–ò–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Å–ø–∏—Å–∫–∏ —á–∏—Å–µ–ª. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ 
–≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ quick_merge(), –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫, 
—Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞–∂–¥–æ–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.

Sample Input 2:
4
10 20
1 15
5 17
8 13 19

Sample Output 2:
1 5 8 10 13 15 17 19 20
"""
# def quick_merge():
#     n = int(input())
#     list_str = []
#     res = []
#     for i in range(n):
#         n_str = input().split(" ")
#         list_str += n_str
#     for i in list_str:
#         res.append(int(i))
#
#     res.sort()
#     print(*res)
#
# quick_merge()

#------------------------------------------------- –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
# # –±–µ—Ä—ë–º –∏–∑ —Ç–µ–æ—Ä–∏–∏ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
# def quick_merge(list1, list2):
#     result = []
#
#     p1 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list1
#     p2 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list2
#
#     while p1 < len(list1) and p2 < len(list2):  # –ø–æ–∫–∞ –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
#         if list1[p1] <= list2[p2]:
#             result.append(list1[p1])
#             p1 += 1
#         else:
#             result.append(list2[p2])
#             p2 += 1
#
#     if p1 < len(list1):  # –ø—Ä–∏—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
#         result += list1[p1:]
#     else:  # –∏–Ω–∞—á–µ –ø—Ä–∏—Ü–µ–ø–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥—Ä—É–≥–æ–≥–æ —Å–ø–∏—Å–∫–∞
#         result += list2[p2:]
#
#     return result
#
#
# # –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫
# n = int(input())
#
# # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –≤–æ–∑—å–º—ë–º
# # —ç—Ç–æ—Ç –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞ –æ—Å–Ω–æ–≤—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
# res = [int(num) for num in input().split()]
#
# # –ø—Ä–∏–Ω–∏–º–∞–µ–º n - 1 —Å—Ç—Ä–æ–∫ (–ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –º—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏)
# for _ in range(n - 1):
#     # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –Ω–µ—ë —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
#     cur_list = [int(num) for num in input().split()]
#
#     # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∏ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
#     # –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç–æ—Ç –Ω–æ–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ
#     # —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
#     res = quick_merge(res, cur_list)
#
# # –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
# print(*res)

"""
Is the Triangle Valid?
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_triangle(side1, side2, side3), 
–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ–≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ 
—Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ side1, side2, side3, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –° –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π –º—ã —É–∂–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(is_valid_triangle(2, 2, 2))
print(is_valid_triangle(2, 3, 10))
print(is_valid_triangle(3, 4, 5))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
False
True

Sample Input 1:
2
2
2
Sample Output 1:

True
"""
# def is_valid_triangle(side1, side2, side3):
#
#     if (side1 + side2 > side3) and (side1 + side3 > side2) and (side2 + side3 > side1):
#         return True
#     else:
#         return False
#
# x1, x2, x3 = int(input()), int(input()), int(input())
# print(is_valid_triangle(x1, x2, x3))

"""
Is the Number Prime? üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 
–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, 
–∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(is_prime(1))
print(is_prime(10))
print(is_prime(17))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

False
False
True
"""

# def is_prime(num):
#     my_list = []
#     for i in range(1, n + 1):
#         if num % i == 0:
#             my_list.append(i)
#
#     if len(my_list) == 2:
#         return True
#     else:
#         return False
#
# n = int(input())
# print(is_prime(n))

# #------------------------------------- –ø–æ –ø—Ä–æ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_prime(num):
#     if num == 1:
#         return False
#     for i in range(2, num):
#         if num % i == 0:
#             return False
#     return True
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_prime(n))

"""
Next Prime üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_next_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 
–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ num –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–∞ num.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_prime() –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(get_next_prime(6))
print(get_next_prime(7))
print(get_next_prime(14))
"""
# def is_prime(num):
#     if num == 1:
#         return False
#     if len([i for i in range(1, num + 1) if num % i == 0]) == 2:
#         return True
#     else:
#         return False
#
# def get_next_prime(num):
#     n = num + 1                 # –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ, —É–≤–µ–ª–∏—á–∏–≤–∞—è –Ω–∞ 1
#     while not is_prime(n):      # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ 1 –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
#         n += 1
#     return n
#
# n = int(input())
# print(get_next_prime(n))

# #----------------------------------------------------- –º–µ–Ω—å—à–µ –∑–∞—Ç—Ä–∞—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False  –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç –¥–µ–ª–∏—Ç–µ–ª—å
# def is_prime(num):
#     if num == 1:
#         return False  # —á–∏—Å–ª–æ 1 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º
#     for i in range(2, int(num ** 0.5) + 1):
#         if num % i == 0:
#             return False  # —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º –¥–µ–ª–∏—Ç–µ–ª—å
#     return True
#
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_next_prime(num):
#     cur_num = num + 1  # –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
#     while not is_prime(cur_num):  # –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ–µ, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1
#         cur_num += 1
#     return cur_num
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_next_prime(n))

"""
Good password üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_password_good(password), 
–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è 
password –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥—ë–∂–Ω—ã–º, 
–∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥—ë–∂–Ω—ã–º, –µ—Å–ª–∏:

–µ–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤; 
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä); 
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä);
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(is_password_good('aabbCC11OP'))
print(is_password_good('abC1pu'))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
True
False
"""
# def is_password_good(password):
#
#     count = 0
#
#     if len(password) >= 8:
#         count += 1
#
#     if len([i for i in password if i.isdigit()]) != 0:
#         count += 1
#
#     for i in password:
#         if 96 < ord(i) <= 122:
#             count += 1
#             break
#
#     for i in password:
#         if 64 < ord(i) <= 90:
#             count += 1
#             break
#
#     return True if count == 4 else False
#
# my_password = input()
# print(is_password_good(my_password))

# #------------------------------------------------------------------ –Ω–æ—Ä–º
# def is_password_good(password):
#     upp = [i for i in password if i.isupper()]
#     low = [i for i in password if i.islower()]
#     dig = [i for i in password if i.isdigit()]
#     return all([len(password) >= 8, upp, low, dig])
#
#
# txt = input()
# print(is_password_good(txt))

#------------------------------------------------------------
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_password_good(password):
#     if len(password) > 7:
#         for i in password:
#             if i.isupper():
#                 for k in password:
#                     if k.islower():
#                         for j in password:
#                             if j.isdigit():
#                                 return True
#     return False
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_password_good(txt))


"""
–†–æ–≤–Ω–æ –≤ –æ–¥–Ω–æ–º 1Ô∏è‚É£
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_one_away(word1, word2), 
–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ —Å–ª–æ–≤–∞ word1 –∏ word2. 
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É 
–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –Ω–∞ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(is_one_away('bike', 'hike'))
print(is_one_away('water', 'wafer'))
print(is_one_away('abcd', 'abpo'))
print(is_one_away('abcd', 'abcde'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
True
False
False
"""
# #---------------------------------------------—Å–¥–µ–ª–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∏–∂–Ω–µ–≥–æ
# def is_one_away(word_1, word_2):
#
#     if len(word_1) == len(word_2):
#         count = [0 + 1 for i in range(len(word1)) if word1[i] != word2[i]]
#         return True if count == [1] else False
#     else:
#         return False
#
# word1 = input()
# word2 = input()
# print(is_one_away(word1, word2))
#
#
#
# #-------------------------------------------------------------- –≤ –ø–æ–º–æ—â—å –≤–µ—Ä—Ö–Ω–µ–º—É
#
# def is_one_away(word_1, word_2):
#     count = 0
#
#     if len(word_1) == len(word_2):
#         count += 1
#
#         for i, j in enumerate(word1):
#             if word1[i] != word2[i]:
#                 count += 1
#     else:
#         count += 0
#     return True if count == 2 else False
#
#
# word1 = input()
# word2 = input()
# print(is_one_away(word1, word2))

# #----------------------------------------------–µ—â—ë –ª—É—á—à–µ
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_one_away(word1, word2):
#     return len([i for i in word1 if i not in word2]) == 1 and len(word1) == len(word2)
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt1 = input()
# txt2 = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_one_away(txt1, txt2))

"""
–ü–∞–ª–∏–Ω–¥—Ä–æ–º
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_palindrome(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ 
–∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É text –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç 
—è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–∞–ª–∏–Ω–¥—Ä–æ–º ‚Äì —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–∏—Ç–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏, 
–∞ —Ç–∞–∫–∂–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã ,.!?-.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(is_palindrome('–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞.'))
print(is_palindrome('Gabler Ruby - burrel bag!'))
print(is_palindrome('BEEGEEK'))
"""

# def is_palindrome(text):
#
#     pln = ""
#
#     for i in text:
#         if i in [" ", "-", "!", "?", ".", ","]:
#             continue
#         else:
#             pln += i
#
#     return pln.lower() == pln[::-1].lower()
#
# txt = input()
# print(is_palindrome(txt))
#
# #-----------------------------------------------------------
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_palindrome(text):
#     text = [i.lower() for i in text if i not in (',.!?- ')]
#     return text == text[::-1]
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_palindrome(txt))


"""
BEEGEEK üêùüå∂Ô∏è
BEEGEEK –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –æ—Ç–∫—Ä—ã–ª —Å–≤–æ–π –±–∞–Ω–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ 
–±–∞–Ω–∫–æ–º–∞—Ç—ã —Å –Ω–µ–æ–±—ã—á–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.

–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å BEEGEEK –±–∞–Ω–∫–∞ –∏–º–µ–µ—Ç –≤–∏–¥ a:b:c, 
–≥–¥–µ a, b –∏ c ‚Äì –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞. –ü–æ—Å–∫–æ–ª—å–∫—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å BEEGEEK —Ñ–∞–Ω–∞—Ç–µ–µ—Ç –æ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, 
—Ç–æ –æ–Ω —Ä–µ—à–∏–ª:

—á–∏—Å–ª–æ a ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º;
—á–∏—Å–ª–æ b ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º;
—á–∏—Å–ª–æ c ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—ë—Ç–Ω—ã–º.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_password(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 
—Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è password –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, 
–µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º BEEGEEK –±–∞–Ω–∫–∞, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
print(is_valid_password('1221:101:22'))
print(is_valid_password('565:30:50'))
print(is_valid_password('112:7:9'))
print(is_valid_password('1221:101:22:22'))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
True
False
False
False
"""


# def is_valid_password(password):
#
#     if len(password) == 3:
#         cnt = 0
#         if password[0] == password[0][::-1]:
#             cnt += 1
#         if len([i for i in range(1, int(password[1]) + 1) if int(password[1]) % i == 0]) == 2:
#             cnt += 1
#         if int(password[2]) % 2 == 0:
#             cnt += 1
#         return cnt == 3
#     else:
#         return False
#
# psw = input().split(":")
# print(is_valid_password(psw))

# #-------------------------------------------- –∏–ª–∏ —Ç–∞–∫
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_valid_password(password):
#     password = password.split(':')
#     return (password[0] == password[0][::-1]) and (len([i for i in range(1, int(password[1])+1) if int(password[1]) % i == 0]) == 2) and (int(password[2]) % 2 == 0)
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# psw = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_valid_password(psw))




"""
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∫–æ–±–æ—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_correct_bracket(text), 
–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É text, 
—Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, 
–µ—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–≤—à–∞—è –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, 
–∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, 
—Å–æ—Å—Ç–æ—è—â–∞—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ), –≥–¥–µ –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–µ –Ω–∞–π–¥—ë—Ç—Å—è 
–ø–∞—Ä–Ω–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ (–ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 
–ª–µ–≤–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏).

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(is_correct_bracket('()(()())'))
print(is_correct_bracket(')(())('))

"""

# def is_correct_bracket(text):
#
#     while '()' in text:
#         text = text.replace('()', '')
#     return not text
#
# txt = input()
# print(is_correct_bracket(txt))


"""
–ó–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä üêç
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_python_case(text), 
–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ ¬´–≤–µ—Ä–±–ª—é–∂—å–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ¬ª 
–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ ¬´–∑–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä¬ª.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å—Ç–∏–ª—è—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(convert_to_python_case('ThisIsCamelCased'))
print(convert_to_python_case('IsPrimeNumber'))

Sample Input 1:
ThisIsCamelCased

Sample Output 1:
this_is_camel_cased
"""

# def convert_to_python_case(text):
#
#     new_text = ""
#
#     for i in text:
#         if i == i.lower():
#             new_text += i
#         elif i == i.upper():
#             new_text += "_" + i
#
#     return new_text[1:].lower()
#
# txt = input()
# print(convert_to_python_case(txt))

# #-----------------------------------------–±–µ–∑ –µ–ª–∏—Ñ
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def convert_to_python_case(text):
#     new_text = ""
#     for el in text:
#         if not el == el.lower():  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã)
#             new_text += "_" + el.lower()
#         else:
#             new_text += el
#
#     return new_text[1:]
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(convert_to_python_case(txt))

"""
#-------------------------------------------------------------
"""
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_middle_point(x1, y1, x2, y2):
#     x = (x1 + x2) / 2
#     y = (y1 + y2) / 2
#     return x, y
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# x_1, y_1 = int(input()), int(input())
# x_2, y_2 = int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# x, y = get_middle_point(x_1, y_1, x_2, y_2)
# print(x, y)

"""
–ü–ª–æ—â–∞–¥—å –∏ –¥–ª–∏–Ω–∞ üìè
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_circle(radius), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ 
–∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞–¥–∏—É—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: 
–¥–ª–∏–Ω—É –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–∞–Ω–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å—é.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–¥–∏—É—Å–∞ 
r –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º:
–°=2œÄr,S=œÄr2
 
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è —á–∏—Å–ª–∞ œÄ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ –º–æ–¥—É–ª—è math.
pi = 3.141592653589793
"""
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_circle(radius):
#     length = 2 * 3.141592653589793 * radius
#     square = 3.141592653589793 * radius**2
#     return length, square
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# r = float(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(*get_circle(r))

"""
–ö–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é solve(a, b, c), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ 
—Ç—Ä–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ a, b, c ‚Äì –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è 
ax2 + bx + c = 0 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ—Ä–Ω–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –° –ø–æ–¥–æ–±–Ω–æ–π –∑–∞–¥–∞—á–µ–π –º—ã —É–∂–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

Sample Input 1:
1
-4
-5
Sample Output 1:
-1.0 5.0
"""

# from math import *
#
# def solve(a, b, c):
#     d = b ** 2 - 4 * a * c
#     if d == 0:
#         return -b / (2 * a), -b / (2 * a)
#     else:
#         x1 = (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)
#         x2 = (-b - sqrt(b ** 2 - 4 * a * c)) / (2 * a)
#
#         return min(x1, x2), max(x1, x2)
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# a, b, c = int(input()), int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# x1, x2 = solve(a, b, c)
# print(x1, x2)

#----------------------------------------------------
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def solve(a, b, c):
#     D = b ** 2 - 4 * a * c
#     x1 = (-b - D ** 0.5) / (2 * a)
#     x2 = (-b + D ** 0.5) / (2 * a)
#
#     return min(x1, x2), max(x1, x2)
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# a, b, c = int(input()), int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# x1, x2 = solve(a, b, c)
# print(x1, x2)

"""
--------------------------------------------------------------------------------------
                                        –≠–ö–ó–ê–ú–ï–ù
--------------------------------------------------------------------------------------
"""

# def do_something():
#     a = 1
#     print(a)
#
# a = 0
# do_something()
# print(a)

# def do_something():
#     a = 1
#
# do_something()
# print(a)

# a = 1
#
# def do_something():
#     print(a)
#
# do_something()

"""
Python —Å—á–∏—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, 
–µ—Å–ª–∏ –≤ –µ—ë –∫–æ–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. 
–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ 
–¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
"""


"""
–ó–≤—ë–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ ‚≠êüå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_triangle(), 
–∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤—ë–∑–¥–Ω—ã–π —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã—Å–æ—Ç–æ–π, —Ä–∞–≤–Ω—ã–º–∏ 
15 –∏ 8 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ:

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ø—Ä–∞–≤–∞ –æ—Ç –∑–≤—ë–∑–¥–æ—á–µ–∫ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–µ—Ç.
"""
#-------------------------------------–Ω–∞—á–∞–ª–æ —Ä–µ—à–µ–Ω–∏—è
# print(" " * 7 + "*" * 1)
# print(" " * 6 + "*" * 3)
# print(" " * 5 + "*" * 5)
# print(" " * 4 + "*" * 7)
# print(" " * 3 + "*" * 9)
# print(" " * 2 + "*" * 11)
# print(" " * 1 + "*" * 13)
# print("*" * 15)
#-------------------------------------–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
# pr = ["*"]
# pr_ch = [7, 6, 5, 4, 3, 2, 1, 0]
# ch = [1, 3, 5, 7, 9, 11, 13, 15]
#
#
# for i, j in enumerate(ch):
#     print(" " * pr_ch[i] + pr[0] * j)

#-------------------------------------–æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
# def draw_triangle():
#     pr = ["*"]
#     pr_ch = [7, 6, 5, 4, 3, 2, 1, 0]
#     ch = [1, 3, 5, 7, 9, 11, 13, 15]
#
#     for i, j in enumerate(ch):
#         print(" " * pr_ch[i] + pr[0] * j)
#
# # –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
# draw_triangle()  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

# #-------------------------------------–¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def draw_triangle():
#     b, z = 7, 1
#     while b >= 0:
#         print(b * ' ', z * '*', sep='')
#         b -= 1
#         z += 2
#
#
# # –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
# draw_triangle()  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

# #-------------------------------------–¥–ª—è –º–µ–Ω—è —Å–∞–º—ã–π –ª—É—á—à–∏–π
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def draw_triangle():
#     spase = 7
#     stars = 1
#     for i in range(8):
#         print(spase * ' ' + stars * '*')
#         spase -= 1
#         stars += 2
#     print()
#
#
# # –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
# draw_triangle()  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ üõµ
–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ 
1000 —Ä—É–±–ª–µ–π –∑–∞ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏ 120 —Ä—É–±–ª–µ–π –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä. 
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_shipping_cost(quantity), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ 
–∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ quantity ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ ‚Äì 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
print(get_shipping_cost(1))
print(get_shipping_cost(3))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
1000
1240
"""


# x = int(input())
# dos_1 = 1000
# dos_2 = 120
#
# if x == 1:
#     print(dos_1)
# else:
#     print(dos_1 + dos_2 * (x-1))

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_shipping_cost(quantity):
#     delivery_1 = 1000
#     delivery_2 = 120
#     if quantity == 1:
#         return delivery_1
#     else:
#         return delivery_1 + delivery_2 * (quantity - 1)
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_shipping_cost(n))

#--------------------------------------------–º–æ–∂–Ω–æ –±–µ–∑ –∏—Ñ
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_shipping_cost(quantity):
#     return 1000 + (quantity - 1) * 120
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_shipping_cost(n))

"""
–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é compute_binom(n, k), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ 
–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ k –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞, 
–∫–æ—Ç–æ—Ä—ã–π –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:

n! / k!(n‚àík)! 
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –§–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ n, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ 
–≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n, —Ç–æ –µ—Å—Ç—å:
n!=1‚ãÖ2‚ãÖ3‚ãÖ‚Ä¶‚ãÖn

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é factorial(n), 
–≤—ã—á–∏—Å–ª—è—é—â—É—é —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —É–∂–µ –≥–æ—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–∑ –º–æ–¥—É–ª—è math. 
–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è compute_binom(n, k) –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
"""
# from math import factorial
#
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def compute_binom(n, k):
#     return round(factorial(n) / (factorial(k) * factorial(n - k)))
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
# k = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(compute_binom(n, k))

# #----------–ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å as –±—É–¥–µ—Ç from math import factorial as f
# from math import factorial as f
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def compute_binom(n, k):
#     return f(n) // (f(k) * f(n - k))
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
# k = int(input())
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(compute_binom(n, k))


"""
–ü–∞–Ω–≥—Ä–∞–º–º—ã üå∂Ô∏è
–ü–∞–Ω–≥—Ä–∞–º–º–∞ ‚Äì —ç—Ç–æ —Ñ—Ä–∞–∑–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤ —Å–µ–±–µ –≤—Å–µ –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞. 
–û–±—ã—á–Ω–æ –ø–∞–Ω–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤ 
–æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–ª–∏—Ñ—ã.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_pangram(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ 
–∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, 
–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–Ω–≥—Ä–∞–º–º–æ–π, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã 
–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª—ã.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
print(is_pangram('Jackdaws love my big sphinx of quartz'))
print(is_pangram('The jay pig fox zebra and my wolves quack'))
print(is_pangram('Hello world'))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
True
True
False
"""

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_pangram(text):
#     alf = "abcdefghijklmnopqrstuvwxyz"
#     count = 0
#
#     for i in alf:
#         if i in text:
#             count += 1
#     return count == 26
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input().lower()
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_pangram(txt))

#------------------------------------------------------
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_pangram(text):
#     text = text.lower()
#     for i in range(ord("a"), ord("z") + 1):
#         if chr(i) not in text:
#             return False
#
#     return True
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# text = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_pangram(text))

"""
–ò—Å–∫–æ–º—ã–π –º–µ—Å—è—Ü üìÖ
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_month(language, number), 
–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ language ‚Äì —è–∑—ã–∫ ru –∏–ª–∏ en 
–∏ number ‚Äì –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (–æ—Ç 1 –¥–æ 12 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –∏ 
–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
print(get_month('ru', 1))
print(get_month('ru', 12))
print(get_month('en', 1))
print(get_month('en', 10))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
—è–Ω–≤–∞—Ä—å
–¥–µ–∫–∞–±—Ä—å
january
october
"""

#month_ru = "—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å", "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"
#month_en = "january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"

# month = input()
# ch = int(input())
#
# if month == 'ru':
#     print(month_ru[ch - 1])
# else:
#     print(month_en[ch - 1])


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_month(language, number):
#     month_ru = "—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å", "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"
#     month_en = "january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"
#
#     if language == 'ru':
#         return month_ru[number - 1]
#     else:
#         return month_en[number - 1]
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# lan = input()
# num = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_month(lan, num))


"""
–ß–∏—Å–ª–æ —Å–ª–æ–≤–∞–º–∏ üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_to_words(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ num –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–ª–æ–≤–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ —á–∏—Å–ª–æ 1‚â§num‚â§99.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(number_to_words(7))
print(number_to_words(85))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
—Å–µ–º—å
–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –ø—è—Ç—å
"""

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def number_to_words(num):
#     words = ["–æ–¥–∏–Ω", "–¥–≤–∞", "—Ç—Ä–∏", "—á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å", "—à–µ—Å—Ç—å", "—Å–µ–º—å", "–≤–æ—Å–µ–º—å", "–¥–µ–≤—è—Ç—å", "–¥–µ—Å—è—Ç—å", "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å", "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å", "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å", "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å", "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å", "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å", "–¥–≤–∞–¥—Ü–∞—Ç—å", "–¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–∏–Ω", "–¥–≤–∞–¥—Ü–∞—Ç—å –¥–≤–∞", "–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–∏", "–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ", "–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å", "–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç—å", "–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–º—å", "–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å–µ–º—å", "–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç—å", "—Ç—Ä–∏–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–¥—Ü–∞—Ç—å –æ–¥–∏–Ω", "—Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–≤–∞", "—Ç—Ä–∏–¥—Ü–∞—Ç—å —Ç—Ä–∏", "—Ç—Ä–∏–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ", "—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø—è—Ç—å", "—Ç—Ä–∏–¥—Ü–∞—Ç—å —à–µ—Å—Ç—å", "—Ç—Ä–∏–¥—Ü–∞—Ç—å —Å–µ–º—å", "—Ç—Ä–∏–¥—Ü–∞—Ç—å –≤–æ—Å–µ–º—å", "—Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç—å", "—Å–æ—Ä–æ–∫", "—Å–æ—Ä–æ–∫ –æ–¥–∏–Ω", "—Å–æ—Ä–æ–∫ –¥–≤–∞", "—Å–æ—Ä–æ–∫ —Ç—Ä–∏", "—Å–æ—Ä–æ–∫ —á–µ—Ç—ã—Ä–µ", "—Å–æ—Ä–æ–∫ –ø—è—Ç—å", "—Å–æ—Ä–æ–∫ —à–µ—Å—Ç—å", "—Å–æ—Ä–æ–∫ —Å–µ–º—å", "—Å–æ—Ä–æ–∫ –≤–æ—Å–µ–º—å", "—Å–æ—Ä–æ–∫ –¥–µ–≤—è—Ç—å", "–ø—è—Ç—å–¥–µ—Å—è—Ç", "–ø—è—Ç—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω", "–ø—è—Ç—å–¥–µ—Å—è—Ç –¥–≤–∞", "–ø—è—Ç—å–¥–µ—Å—è—Ç —Ç—Ä–∏", "–ø—è—Ç—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å–¥–µ—Å—è—Ç –ø—è—Ç—å", "–ø—è—Ç—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å", "–ø—è—Ç—å–¥–µ—Å—è—Ç —Å–µ–º—å", "–ø—è—Ç—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å", "–ø—è—Ç—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –¥–≤–∞", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —Ç—Ä–∏", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –ø—è—Ç—å", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —Å–µ–º—å", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å", "—Å–µ–º—å–¥–µ—Å—è—Ç", "—Å–µ–º—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω", "—Å–µ–º—å–¥–µ—Å—è—Ç –¥–≤–∞", "—Å–µ–º—å–¥–µ—Å—è—Ç —Ç—Ä–∏", "—Å–µ–º—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ", "—Å–µ–º—å–¥–µ—Å—è—Ç –ø—è—Ç—å", "—Å–µ–º—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å", "—Å–µ–º—å–¥–µ—Å—è—Ç —Å–µ–º—å", "—Å–µ–º—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å", "—Å–µ–º—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –¥–≤–∞", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —Ç—Ä–∏", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –ø—è—Ç—å", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —Å–µ–º—å", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ –æ–¥–∏–Ω", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ –¥–≤–∞", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ —Ç—Ä–∏", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ —á–µ—Ç—ã—Ä–µ", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ –ø—è—Ç—å", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ —à–µ—Å—Ç—å", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ —Å–µ–º—å", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ –≤–æ—Å–µ–º—å", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ –¥–µ–≤—è—Ç—å"]
#     return words[n - 1]
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(number_to_words(n))
#
# #-------------------------------------------------------
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def number_to_words(num):
#     before_twenty = [
#         '', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å',
#         '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å'
#     ]
#     after_twenty = [
#         '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç',
#         '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'
#     ]
#
#     if num < 20:
#         res = before_twenty[num]
#     else:
#         res = after_twenty[num // 10 - 2] + " " + before_twenty[num % 10]
#     return res.strip()
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(number_to_words(n))

"""
–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã ‚ú®
–ú–∞–≥–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ ‚Äì —ç—Ç–æ –¥–∞—Ç–∞, –∫–æ–≥–¥–∞ –¥–µ–Ω—å, —É–º–Ω–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –º–µ—Å—è—Ü, —Ä–∞–≤–µ–Ω —á–∏—Å–ª—É, 
–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–≤—É–º—è —Ü–∏—Ñ—Ä–∞–º–∏ –≥–æ–¥–∞.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_magic(date), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 
—Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, 
–µ—Å–ª–∏ –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–æ–π, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

print(is_magic('10.06.1960'))
print(is_magic('11.06.1960'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
False
"""

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_magic(date):
#     d = date.split(".")
#     if int(d[0]) * int(d[1]) == int(d[2]) % 100:
#         return True
#     return False
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# date = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_magic(date))

"""
—à–∏—Ñ—Ä —Ü–µ–∑–∞—Ä—è
"""
# # –û–¢–í–ï–¢  –õ—Ö–∫—Ä–ø—á, —Ñ—å—à –º–ø—ä—ç–ø—å, —å–ø—â—Ö—à –ø—Ü—ç —á–∫ —ã–º–ø—å–ø!
# # –ö–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
# # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª for, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (input() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É).
# for i in input():
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –±—É–∫–≤–æ–π.
#     if i.isalpha():
#         # –° –ø–æ–º–æ—â—å—é ord(i) –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ i –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ Unicode.
#         # –ó–∞—Ç–µ–º –∫ —ç—Ç–æ–º—É —á–∏—Å–ª—É –¥–æ–±–∞–≤–ª—è–µ–º 10 (—Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ 10 –ø–æ–∑–∏—Ü–∏–π).
#         # –í–∞–∂–Ω–æ: ord('—è') - –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –≤ —Ä—É—Å—Å–∫–æ–π –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ, –∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
#         # –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–≥—Ä–∞–Ω–∏" –∞–ª—Ñ–∞–≤–∏—Ç–∞, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –∫—Ä—É–≥–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ (–ø–æ—Å–ª–µ '—è' –∏–¥–µ—Ç –æ–ø—è—Ç—å '–∞').
#         # –ó–∞—Ç–µ–º –º—ã –±–µ—Ä–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ ord('—è'), —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—Å—Ç–∞–µ–º—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∞–ª—Ñ–∞–≤–∏—Ç–∞.
#         # –î–∞–ª–µ–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º chr() –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–∏–º–≤–æ–ª –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ.
#         print(chr((ord(i) + 10) % ord('—è')), end='')
#     else:
#         # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–∫–≤–æ–π, –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
#         print(i, end='')



"""
–Ω–∞ 17 –≤–ø—Ä–∞–≤–æ
"""
# –û–¢–í–ï–¢  Kf sv, fi efk kf sv, kyrk zj kyv hlvjkzfe!
# –ö–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
# def caesar_cipher(text, shift):
#     result = ""
#     for char in text:
#         if char.isalpha():
#             # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑—É –¥–ª—è —Å–¥–≤–∏–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞ –±—É–∫–≤—ã (A –¥–ª—è –±–æ–ª—å—à–∏—Ö, a –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö)
#             base = ord('A') if char.isupper() else ord('a')
#             # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–¥–≤–∏–≥ –∏ —É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∞–ª—Ñ–∞–≤–∏—Ç –∫—Ä—É–≥–ª—ã–π (–ø–æ—Å–ª–µ 'Z' –∏–¥–µ—Ç 'A', –ø–æ—Å–ª–µ 'z' –∏–¥–µ—Ç 'a')
#             shifted_char = chr(((ord(char) - base + shift) % 26) + base)
#             result += shifted_char
#         else:
#             # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–∫–≤–æ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
#             result += char
#     return result
# text_to_encrypt = "To be, or not to be, that is the question!"
# shift_amount = 17
# encrypted_text = caesar_cipher(text_to_encrypt, shift_amount)
# print("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", encrypted_text)


"""
—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
"""
# s = '–®—Å—ä—Ü—Ö—Ä —â–º—á–∂–º—â –π—à–º, –Ω–º—Ç–∑–∂ –π—à–º –ª—Ö—à—â–∑—â–≥.'
# # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
# m = ''
# # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
# for i in s:
#     if i.isalpha():           # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –±—É–∫–≤–æ–π
#         m += chr(ord(i) - 7)  # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª —Å —É—á–µ—Ç–æ–º —Å–¥–≤–∏–≥–∞ –≤–ª–µ–≤–æ –Ω–∞ 7 –ø–æ–∑–∏—Ü–∏–π
#     else:
#         m += i                # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –±—É–∫–≤–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
# # –ü—Ä–∏–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
# m = m.lower()
# # –ü–µ—Ä–≤—É—é –±—É–∫–≤—É —Ç–µ–∫—Å—Ç–∞ –¥–µ–ª–∞–µ–º –∑–∞–≥–ª–∞–≤–Ω–æ–π
# print(m.capitalize())

"""
–¢–µ–∫—Å—Ç ¬´Sgd fqzrr hr zkvzxr fqddmdq nm sgd nsgdq rhcd ne sgd edmbd.¬ª 
–±—ã–ª –ø–æ–ª—É—á–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –¶–µ–∑–∞—Ä—è —Å–æ —Å–¥–≤–∏–≥–æ–º –≤–ø—Ä–∞–≤–æ 
–Ω–∞ 25 —Å–∏–º–≤–æ–ª–æ–≤. –†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
"""
# # –û–¢–í–ï–¢  The grass is always greener on the other side of the fence.
# # –ö–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
# n, s = -25, 'Sgd fqzrr hr zkvzxr fqddmdq nm sgd nsgdq rhcd ne sgd edmbd.'
# # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ s
# for i in s:
#     if i.isalpha():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –±—É–∫–≤–æ–π
#         c = ('a', 'A')[i.isupper()]  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä —Å–∏–º–≤–æ–ª–∞ (–Ω–∏–∂–Ω–∏–π –∏–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π)
#
#         # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª, —É—á–∏—Ç—ã–≤–∞—è —Å–¥–≤–∏–≥ n –∏ –∫—Ä—É–≥–æ–≤–æ–π –∞–ª—Ñ–∞–≤–∏—Ç (26 –±—É–∫–≤)
#         print(chr(ord(c) + (ord(i) + n - ord(c)) % 26), end='')
#     else:
#         # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –±—É–∫–≤–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
#         print(i, end='')

"""
–¢–µ–∫—Å—Ç ¬´Hawnj pk swhg xabkna ukq nqj.¬ª –±—ã–ª –ø–æ–ª—É—á–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è 
–∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –¶–µ–∑–∞—Ä—è —Å —Å–¥–≤–∏–≥–æ–º –≤–ø—Ä–∞–≤–æ –Ω–∞ nn —Å–∏–º–≤–æ–ª–æ–≤. –†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
"""

# # –û–¢–í–ï–¢  Learn to walk before you run.
# # –ö–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
# s = "Hawnj pk swhg xabkna ukq nqj."
# # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–¥–≤–∏–≥–∏ –æ—Ç 0 –¥–æ 25
# for n in range(26):
#     # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–¥–≤–∏–≥–∞
#     decrypted_text = ""
#
#     # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ s
#     for c in s:
#         if c in ',.?! ':  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª - –∑–Ω–∞–∫ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
#             decrypted_text += c
#         elif 65 <= ord(c) <= 90:  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª - –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ (A-Z)
#             decrypted_text += chr((ord(c) - n - 65) % 26 + 65)
#         elif 97 <= ord(c) <= 122:  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª - —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞ (a-z)
#             decrypted_text += chr((ord(c) - n - 97) % 26 + 97)
#
#     # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–¥–≤–∏–≥–∞
#     print(decrypted_text)


# n = input()  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏.
# s = n
# for j in n:
#     if j in '*,.!@"-':
#         s = s.replace(j, '')
# # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ `g`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–ª–∏–Ω—ã —Å–ª–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –≤–∏–¥–µ —á–∏—Å–µ–ª.
# g = [len(i) for i in s.split()]
# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
# count = 0
# word_new = ''
# # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ `n`.
# for d in n:
#     number = ord(d)  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ Unicode.
#
#     if d == ' ':  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª - –ø—Ä–æ–±–µ–ª, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
#         count += 1
#         word_new += chr(number)
#     elif 65 <= number <= 90:  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª - –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ (A-Z), –≤—ã–ø–æ–ª–Ω—è–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ.
#         number += g[count]
#         if number > 90:  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã A-Z, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥.
#             number = number - 26
#             word_new += chr(number)
#         else:
#             word_new += chr(number)
#     elif 97 <= number <= 122:  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª - —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞ (a-z), –≤—ã–ø–æ–ª–Ω—è–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ.
#         number += g[count]
#         if number > 122:  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã a-z, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥.
#             number = number - 26
#             word_new += chr(number)
#         else:
#             word_new += chr(number)
#     else:
#         word_new += chr(number)  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –±—É–∫–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
#
# print(word_new)  # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.


# print(int('111111', 2))

# print(int('1AF2', 16))


# for n in range(8, 16):
#     if 8 * n + 8 == (3 * n + 2) + (2 * n + 2) + (n + 6) + (n + 7):
#         print(n)

# –û—Ç–≤–µ—Ç:  3E8

# –ö–æ–¥ —Ä–µ—à–µ–Ω–∏—è
# print(hex(1000)[2:])

# –û—Ç–≤–µ—Ç:  1000000001
# –ö–æ–¥ —Ä–µ—à–µ–Ω–∏—è
# print(bin(513))

a = int(input())  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π a.
bin_num = bin(a)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ a –≤ –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ bin_num.
oct_num = oct(a)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ a –≤ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ oct_num.
hex_num = hex(a)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ a –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ hex_num.
# –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è, —É–¥–∞–ª—è—è '0b' –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏.
print(bin_num[2:])
# –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è, —É–¥–∞–ª—è—è '0o' –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏.
print(oct_num[2:])
# –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è, –ø—Ä–∏–≤–æ–¥—è –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è—è '0x' –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏.
print(hex_num[2:].upper())




