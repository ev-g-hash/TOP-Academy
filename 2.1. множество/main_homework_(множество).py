"""
Задача 1: Общие элементы с частотой
Условие: Напишите функцию, которая принимает два списка и возвращает список общих элементов,
учитывая их частоту. То есть, если элемент встречается в обоих списках несколько раз,
он должен появляться в результате столько же раз.
"""
print(f"\nОбщие элементы с частотой: ")

def my_elem(list1,list2):

    list_3 = list1 + list2

    return sorted(list_3)

list_1 = [5,4,9,2,0,1,2,3,4,2]
list_2 = [1,2,3,4,2]
print(my_elem(list_1,list_2))

"""
Задача 2: Найти уникальные элементы
Условие: Напишите функцию, которая принимает список и возвращает множество уникальных 
элементов, которые встречаются только один раз.
"""
print(f"\nМножество уникальных элементов:")

def my_unique(*args2):

    unique = set(*args2)

    return unique

my_args2 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
print(my_unique(my_args2))

"""
Задача 3: Разделение на подмножества
Условие: Напишите функцию, которая принимает список чисел и делит его на два множества: 
одно содержит четные числа, а другое — нечетные.
"""
print(f"\nЧётные, нечётные множества:")

def my_even_odd(args3):

    set_even = set()
    set_odd = set()

    for i in args3:
        if i % 2 == 0:
            set_even.add(i)
        else:
            set_odd.add(i)

    return f"""чётные - {set_even} \nнечётные - {set_odd}"""

my_list3 = [1,2,3,4,5,6,7,8,9,10]
print(my_even_odd(my_list3))

"""
Задача 4: Разница между множествами
Условие: Напишите функцию, которая принимает два множества и возвращает множество элементов,
которые присутствуют только в первом множестве и отсутствуют во втором.
"""
print(f"\nРазница между множествами: ")

def my_set_double(args4_1, args4_2):

    args4_3 = args4_1.difference(args4_2)

    return args4_3

args_41 = {1,2,3,4,5}
args_42 = {3,4,5,6,7}
print(my_set_double(args_41, args_42))

"""
Задача 5: Проверка на симметрическую разность
Условие: Напишите функцию, которая проверяет, являются ли два множества симметрической 
разностью (то есть объединением элементов, которые присутствуют только в одном из множеств).
"""
def my_symmetry(args51,args52):

    x5_1 = args51.difference(args52)
    x5_2 = args52.difference(args51)

    return f"""\nсимметрическая разность: {x5_1} и {x5_2}"""

list_51 = {5,4,9,2,0}
list_52 = {1,2,3,4,5}
print(my_symmetry(list_51,list_52))

"""
Задача 6: Сравнение множеств по размеру
Условие: Напишите функцию, которая принимает два множества и определяет, 
какое из них больше по количеству элементов. Если они равны по размеру — вернуть "равны".
"""
print(f"\nСравнение множеств по размеру:")

def my_set_equals(args61, args62):

    count_61 = 0
    count_62 = 0

    for i in args61:
        if i:
            count_61 += 1
    for j in args62:
        if j:
            count_62 += 1

    if count_61 == count_62:
        print("равны")

args_61 = {1, 2, 3, 4, 5}
args_62 = {6, 7, 8, 9, 10}
my_set_equals(args_61, args_62)

"""
Задача 7: Объединение нескольких множеств
Условие: Напишите функцию, которая принимает список множеств и возвращает одно 
объединенное множество.
"""
print(f"\nОбъединение нескольких множеств: ")

def my_set_sps(*args):

    my_set = set.union(*args)

    return my_set

set_1 = {1,2,3}
set_2 = {4,5,6}
set_3 = {7,8,9}
set_4 = {10,11,12}
print(my_set_sps(set_1,set_2,set_3,set_4))

"""
Задача 8: Удаление дубликатов из списка
Условие: Напишите функцию для удаления дубликатов из списка с сохранением порядка 
элементов.
"""
print(f"\nУдаление дубликатов из списка: ")

def my_double_sps(args8):

    my_list8 = []

    for i in args8:
        if i not in my_list8:
            my_list8.append(i)

    return my_list8

list8 = [10, 4, 3, 9, 6, 0, 10, 0, 4, 5]
print(my_double_sps(list8))