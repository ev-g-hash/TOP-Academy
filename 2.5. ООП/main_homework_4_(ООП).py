"""
Предыстория:
Вася решил закрепить свои знания по статическим методам,
взяв разного рода задачки по математике.
Для этого он взял пример подсчёта времени относительно скорости и расстояния.

Задание 1 класс Time:
1.	Создайте класс Time
2.	Создайте статический метод с помощью декоратора @staticmethod,
и назовите его count_time. В параметрах укажите (distance, speed).
3.	Внутри метода лишь одна операция, подсчёт времени по формуле
(time = distance / speed). Метод возвращает результат time с помощью return
4.	Вызовете метод count_time() через класс, и укажите в аргументах (500, 100).
Вызывать нужно через print(), так как метод использует return.
"""
print("\nЗадание 1 класс Time:")
class Time:

    @staticmethod

    def count_time(distance, speed):
        time = distance / speed
        return time

print(Time.count_time(500, 100))

"""
Предыстория:
Вася создаёт программу для водителей. 
В ней вы указываете расстояние, которое планируете проехать, 
расход топлива на 100км вашей машины, цену на бензин в вашем регионе. 
Программа выводит на экран информацию о будущих финансовых расходах. 
Вася вероломно использует статический метод для подсчёта.

Задание 2 класс Driver:
1.	Создайте класс Driver
2.	Объявите статический метод calculate_fuel_costs() с параметрами 
(distance, fuel, price). Напоминашка: @staticmethod.
- Создайте переменную result, в ней будет хранится результат подсчётов.
- Готовая формула подсчётов будет в комментариях.
- Выведите на экран округлённое значение result, используя функцию round().
Значение округлите до сотых. Постарайтесь сделать округление имено с round(), 
иначе ответы могут не совпасть.
3.	Оставшаяся часть кода уже написана, вам нужно сделать то, что указано в задании.
 
Для тех кто хочет придумать формулу сам:
•	distance - расстояние в км, которое нужно проехать. Например 3 км.
•	fuel - расход топлива машины на 100км. Например 7л на 100км.
•	price - цена бензина за 1 л. Например 50. 
•	Посчитайте, сколько нужно потратить денег чтобы проехать distance. Сохраните результат подсчёта в result. Не забудьте округлить перед выводом на экран.
"""
print("\nЗадание 1 класс Driver:")
class Driver:
    @staticmethod
    def calculate_fuel_costs(distance, fuel, price):

        result = round((distance/100 * fuel * price), 2)

        return result
print(Driver.calculate_fuel_costs(500, 7, 50))

"""
Предыстория:
Вася использует программирование в повседневной жизни.
В этот раз он пишет программу, показывающую истёк ли срок годности у товара или нет.
Он указывает сегодняшнюю дату и дату окончания товара и получает ответ.
Для этого он нестерпимо решил использовать статический метод.

Задание:
1.	Часть кода уже написана. Для выполнения задания,
уже импортирована библиотека datetime.
С помощью этой библиотеки мы создадим сегодняшнюю дату (start) и
дату окончания (finish). И после этого, мы сможем сравнивать эти даты на
"больше, меньше, равно", как обычные числа.
2.	Создайте класс Product.
3.	Создайте статический метод check_date(today, expiry).
Параметр today - это сегодняшняя дата, а параметр expiry - дата срока годности товара.
4.	В методе создадим две переменные start и finish:
start = datetime.strptime(today, "%Y-%m-%d")
finish = datetime.strptime(expiry, "%Y-%m-%d")
5.	Сравните finish и start. Если finish больше чем start выведите текст:
Срок годности в порядке.
Иначе выведите текст: Срок годности истёк.
6.	Вам нужно только сделать то, что в задании, остальное уже готово.
"""

print("\nЗадание 1 класс Product:")
class Product:
    @staticmethod

    def check_date(today, expiry):
        from datetime import datetime
        start = datetime.strptime(today, "%Y-%m-%d")
        finish = datetime.strptime(expiry, "%Y-%m-%d")
        if finish > start:
            print("Срок годности в порядке")
        else:
            print("Срок годности истёк")

Product.check_date("2025-06-01", "2025-07-01")