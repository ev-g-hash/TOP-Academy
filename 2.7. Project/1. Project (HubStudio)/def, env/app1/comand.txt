-------------------------------------работа с проектом-----------------------------------------

- создать папку проекта
- открыть её в VScode

- развернуть виртуальную среду (python -m venv venv)
venv - название папки для вирт.среды(можно любую)

- venv\Scripts\activate (активация\deactivate-деактивация)
(активация запускатся каждый раз перед сессией python manage.py runserver и терминал
остается открытым, работа продолжается в новом терминале)

- pip install django (установка джанго)

- если запускается через пуэлл шелл и выдаёт ошибку то
открываем file/preferences/settings/кликнуть на значёк в правом вехнем углу(open settings (JSON))
дописать команду - ("terminal.integrated.defaultProfile.windows": "Command Prompt",)

- pip install --upgrade pip (обновление менеджера)

- django-admin

- django-admin startproject app . (создание нового проекта
точка в конце через пробел обязательна, app - название проекта(папки)
создаётся директрорий app со вложенной папкой app, директорий app переименовываем
на app1)

-открываем папку app1 через File-Open Folder

- далее нужно поменять интерпретатор с корневого на из папки app1/venv/Scripts - python.exe
щелкаем в правом нижнем углу на версию python при открытом файле manage.py
выбираем путь интерпретатора app1/venv/Scripts - python.exe.

- python manage.py runserver

- запуск runserver в автоматическом режиме настройка
(справа на вертикальной панели кнопка плей и жучёк нажимаем её
выбираем -create a launch.json file-, далее python debugger, далее
в выпадающем меню django, далее manage.py )

- во вкладке слева на вертикальной панели в установленых праграммах проверить установленные расширения:
    python
    pylance
    django
    black formatter

------------------------------------------написание проекта
-  python manage.py startapp main (создаём папку main)
    (регистрируем - app/settings/INSTALLED_APPS/
    отступаем строку и записываем - ('main',) )

- пишем первое представление main/views.py
def index(request):
    return HttpResponse('Home page')
def about(request):
    return HttpResponse('About page')

- закрепление за url (заходим в папку app открываем urls.py)
app/urls.py
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index, name='index'),
    path('about/', views.about, name='about'),
]

- создаём папку templates (без ошибок) в каталоге main, далее в templates создаём папку main
и создаём файл index.html
в файл main/views.py вносим изменения
def index(request):
    return render(request, 'main/index.html')















